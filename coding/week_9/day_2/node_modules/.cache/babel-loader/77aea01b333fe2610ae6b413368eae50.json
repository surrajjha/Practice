{"ast":null,"code":"const INC_COUNTER = \"INC_COUNTER\";\nconst DEC_COUNTER = \"DEC_COUNTER\";\nconst ODD_INCREMENT = \"ODD_INCREMENT\";\nconst EVEN_INCREMENT = \"EVEN_INCREMENT\";\nconst MULTIPLY = \"MULTIPLY\";\nconst DIVIDE = \"DIVIDE\";\nconst initialState = {\n  count: 0\n};\n\nconst counter = (state = initialState, action) => {\n  switch (action.type) {\n    case INC_COUNTER:\n      return {\n        count: state.count + action.amount\n      };\n      break;\n\n    case DEC_COUNTER:\n      return {\n        count: state.count - action.amount\n      };\n      break;\n\n    case EVEN_INCREMENT:\n      return {\n        count: state.count + action.amount + 2\n      };\n      break;\n\n    case ODD_INCREMENT:\n      return {\n        count: state.count + action.amount + 1\n      };\n      break;\n\n    case MULTIPLY:\n      return {\n        count: state.count * action.amount\n      };\n      break;\n\n    case DIVIDE:\n      return {\n        count: state.count / action.amount\n      };\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default counter;","map":{"version":3,"sources":["/home/suraj/coding/week_9/day_2/src/reducer.js"],"names":["INC_COUNTER","DEC_COUNTER","ODD_INCREMENT","EVEN_INCREMENT","MULTIPLY","DIVIDE","initialState","count","counter","state","action","type","amount"],"mappings":"AAAA,MAAMA,WAAW,GAAG,aAApB;AAEA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,aAAa,GAAC,eAApB;AACA,MAAMC,cAAc,GAAC,gBAArB;AACA,MAAMC,QAAQ,GAAC,UAAf;AACA,MAAMC,MAAM,GAAC,QAAb;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAL;AACE,aAAO;AACLO,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACE;AADvB,OAAP;AAGA;;AACF,SAAKX,WAAL;AACE,aAAO;AACLM,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACE;AADvB,OAAP;AAGA;;AACA,SAAKT,cAAL;AACQ,aAAO;AACNI,QAAAA,KAAK,EAACE,KAAK,CAACF,KAAN,GAAYG,MAAM,CAACE,MAAnB,GAA0B;AAD1B,OAAP;AAGA;;AACN,SAAKV,aAAL;AACI,aAAO;AACHK,QAAAA,KAAK,EAACE,KAAK,CAACF,KAAN,GAAYG,MAAM,CAACE,MAAnB,GAA0B;AAD7B,OAAP;AAGA;;AACJ,SAAKR,QAAL;AACQ,aAAO;AACHG,QAAAA,KAAK,EAACE,KAAK,CAACF,KAAN,GAAYG,MAAM,CAACE;AADtB,OAAP;AAGA;;AACP,SAAKP,MAAL;AACO,aAAO;AACHE,QAAAA,KAAK,EAACE,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACE;AADxB,OAAP;AAGA;;AAGZ;AACE,aAAOH,KAAP;AAlCJ;AAoCD,CArCD;;AAuCA,eAAeD,OAAf","sourcesContent":["const INC_COUNTER = \"INC_COUNTER\"; \n\nconst DEC_COUNTER = \"DEC_COUNTER\"; \nconst ODD_INCREMENT=\"ODD_INCREMENT\";\nconst EVEN_INCREMENT=\"EVEN_INCREMENT\";\nconst MULTIPLY=\"MULTIPLY\";\nconst DIVIDE=\"DIVIDE\"\n\nconst initialState = {\n  count: 0\n  \n};\n\n\nconst counter = (state = initialState, action) => {\n  switch (action.type) {\n    case INC_COUNTER:\n      return {\n        count: state.count + action.amount\n      };\n      break;\n    case DEC_COUNTER:\n      return {\n        count: state.count - action.amount\n      };\n      break;\n      case EVEN_INCREMENT:\n              return {\n               count:state.count+action.amount+2\n              };\n              break;\n        case ODD_INCREMENT :\n            return {\n                count:state.count+action.amount+1\n            };\n            break;\n        case MULTIPLY:\n                return {\n                    count:state.count*action.amount\n                };\n                break;\n         case DIVIDE:\n                return {\n                    count:state.count / action.amount\n                };\n                break;\n        \n                   \n    default:\n      return state;\n  }\n};\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}